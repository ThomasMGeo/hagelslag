#!/usr/bin/env python
import matplotlib
from hagelslag.processing.STObject import read_geojson
from datetime import datetime
import matplotlib.pyplot as plt
from glob import glob
import sys, pdb
import numpy as np


def load_storm_objects(path, run_date, member, model_format):
    storm_tracks = []
    model_files = sorted(glob(path + run_date.strftime("%Y%m%d/") + member + "/" + model_format + "*.json"))
    for model_file in model_files:
        storm_tracks.append(read_geojson(model_file))
    return storm_tracks


def get_storm_polygons(storm_tracks):
    storm_polygons = []
    bounds = np.zeros(4)
    for i, storm_track in enumerate(storm_tracks):
        x_min = np.array([storm_track.x[t].min() for t in range(len(storm_track.x))]).min()
        y_min = np.array([storm_track.y[t].min() for t in range(len(storm_track.y))]).min()
        x_max = np.array([storm_track.x[t].max() for t in range(len(storm_track.x))]).max()
        y_max = np.array([storm_track.y[t].max() for t in range(len(storm_track.y))]).max()
        bounds[0] = np.minimum(x_min, bounds[0])
        bounds[1] = np.minimum(y_min, bounds[1])
        bounds[2] = np.maximum(x_max, bounds[2])
        bounds[3] = np.maximum(y_max, bounds[3])
        poly_series = [storm_track.boundary_polygon(time) for time in storm_track.times]
        storm_polygons.append([])
        for p, poly in enumerate(poly_series):
            points = [QtCore.QPointF(p[0], p[1]) for p in poly.T[::-1]]
            storm_polygons[-1].append(QtGui.QPolygonF())
            for t in range(len(points)):
                storm_polygons[-1][-1].append(points[t])
            try: 
                storm_polygons[-1][-1].append(points[0])
            except IndexError:
                print "Oops! IndexError on storm track", i
                print "tried to append points[0] to storm_polygons[-1][-1], but..."
		print type(points), "len(points)=", len(points), "points=", points, "poly=", poly
                print "storm_track.times=", storm_track.times, "poly #", p, "storm_track.id=", storm_track.id

    return storm_polygons, bounds


def main():
    json_path = "/Users/djgagne/research/track_data_spring2015_unique_json/"
    json_path = "/glade/scratch/ahijevyc/OBJECT_TRACK/track_data_VSE_json/"
    run_date = datetime(2007, 2, 24)
    members = ["3km_pbl1","1km_pbl1"]
    colors = [QtGui.QBrush(QtCore.Qt.red), QtGui.QBrush(QtCore.Qt.blue)]
    model_format = "VSE"
    storm_polygons = {}

    widget.setWindowTitle("Hagelslag Storm Viewer")
    widget.setGeometry(0, 0, 800, 700)
    widget.show()
    for member in members:
        storm_objects = load_storm_objects(json_path, run_date, member, model_format)
        pdb.set_trace()
        storm_polygons[member], bounds = get_storm_polygons(storm_objects)
    for m, member in enumerate(members):
        viewer.addStorms(storm_polygons[member], colors[m])
    sys.exit(app.exec_())
    return

if __name__ == "__main__":
    main()
