#!/usr/bin/env python
from netCDF4 import Dataset
import argparse
from hagelslag.data.WRFModelGrid import WRFModelGrid
from hagelslag.processing import Hysteresis
from multiprocessing import Pool
from scipy.ndimage import find_objects, gaussian_filter
from glob import glob
from datetime import datetime
import traceback


def main():
    wrf_vars = ["U", "V", "W", "TEMP", "GPH", "PRES", "HGT", "REFL_10CM",
                "QVAPOR", "QRAIN", "QICE", "QSNOW", "QGRAUP", "QHAIL", "QCLOUD",
                "QNRAIN", "QNICE", "QNSNOW", "QNGRAUPEL", "QNHAIL", "QNCLOUD",
                "QICE2", "QNICE2", "QVGRAUPEL", "QNGRAUPEL2", "QVGRAUPEL2", "V_ICE",
                "D_ICE", "RHO_ICE", "XLAT", "XLONG", "CLDFRA", "T2", "Q2", "U10", "V10", "PSFC"]
    parser = argparse.ArgumentParser()
    parser.add_argument("-p", "--path", help="Path to wrfout files")
    parser.add_argument("-o", "--out", help="Path where WRF object netCDF files are written")
    parser.add_argument("-v", "--var", default="REFL_10CM", help="Variable for object finding")
    parser.add_argument("-u", "--up", default=50, type=float, help="Upper threshold for hysteresis")
    parser.add_argument("-l", "--low", default=10, type=float, help="Lower threshold for hysteresis")
    parser.add_argument("-s", "--smooth", default=2, type=int, help="Smoothing radius")
    parser.add_argument("-a", "--area", default=16, type=int, help="Minimum object size")
    parser.add_argument("-d", "--dom", default="d01", help="WRF domain")
    parser.add_argument("-n", "--nprocs", default=1, help="Number of processors")
    parser.add_argument("-e", "--ext", default=",".join(wrf_vars),
                        help="Variables to be extracted from WRF as comma separated list")
    args = parser.parse_args()
    pool = Pool(args.nprocs)
    wrf_files = [a.replace(args.path, "") for a in sorted(glob(args.path + "wrfout_{0}_*".format(args.dom)))]
    wrf_vars = args.ext.split(",")
    for wrf_file in wrf_files:
        valid_date = datetime.strptime(wrf_file[10:], "%Y%m%d_%H:%M:%S")
        pool.apply_async(extract_wrf_timestep, (valid_date, args.var, args.up, args.low, args.smooth, args.area,
                                                args.dom, args.path, wrf_vars, args.out))
    pool.close()
    pool.join()
    return


def extract_wrf_timestep(valid_date, variable, upper_threshold, lower_threshold, smoothing, min_size,
                         domain, wrf_path, wrf_vars, out_path):
    try:
        object_slices, grid_shape, global_attributes = find_wrf_objects(valid_date, variable, upper_threshold,
                                                                        lower_threshold, smoothing,
                                                                        min_size, domain, wrf_path)
        extract_wrf_boxes(object_slices, grid_shape, global_attributes, valid_date,
                          wrf_vars, domain, wrf_path, out_path)
    except Exception as e:
        print(traceback.format_exc())
        raise e


def find_wrf_objects(valid_date, variable, upper_threshold, lower_threshold, smoothing, min_size, domain, path):
    wrf_grid = WRFModelGrid(valid_date, variable, domain, path)
    var_data = wrf_grid.load_full_grid()
    global_attributes = wrf_grid.get_global_attributes()
    grid_shape = var_data.shape
    if len(var_data.shape) == 4:
        var_data = var_data[0].max(axis=0)
    hyst = Hysteresis(lower_threshold, upper_threshold)
    if smoothing > 0:
        label_grid = hyst.label(gaussian_filter(var_data, smoothing, mode="constant"))
    else:
        label_grid = hyst.label(var_data)
    filtered_grid = hyst.size_filter(label_grid, min_size)
    object_slices = find_objects(filtered_grid, filtered_grid.max())
    return object_slices, grid_shape, global_attributes


def extract_wrf_boxes(object_slices, grid_shape, global_attributes, valid_date, wrf_vars, domain, wrf_path, out_path):
    out_filename = out_path + "wrfobjects_{0}_{1}.nc".format(domain, valid_date.strftime("%Y-%m-%d_%H%M%S"))
    out_data = Dataset(out_filename, mode="w")
    for attribute in global_attributes.keys():
        setattr(out_data, attribute, global_attributes[attribute])
    for o, object_slice in enumerate(object_slices):
        grp = out_data.createGroup("wrf_object_{0:04d}".format(o))
        grp.createDimension("time", 1)
        grp.createDimension("south_north", object_slice[0].stop - object_slice[0].start)
        grp.createDimension("west_east", object_slice[1].stop - object_slice[1].start)
        grp.createDimension("bottom_top", grid_shape[1])
        setattr(grp, "SOUTH_NORTH_BOX_START_C", object_slice[0].start)
        setattr(grp, "SOUTH_NORTH_BOX_END_C", object_slice[0].stop)
        setattr(grp, "WEST_EAST_BOX_START_C", object_slice[1].start)
        setattr(grp, "WEST_EAST_BOX_END_C", object_slice[1].stop)
    for wrf_var in wrf_vars:
        print("Extracting {0} at {1}".format(wrf_var, valid_date.strftime("%Y-%m-%d_%H:%M:%S")))
        if wrf_var == "TEMP":
            t_grids = {}
            for var in ["T", "P", "PB"]:
                wrf_file_obj = WRFModelGrid(valid_date, var, domain, wrf_path)
                t_grids[var] = wrf_file_obj.load_full_grid()
            wrf_var_grid = (t_grids["T"] + 300.0) * ((t_grids["P"] + t_grids["PB"]) / 100000.0) ** (287.0 / 1005.0)
            del t_grids
        elif wrf_var == "GPH":
            gp_grids = {}
            for var in ["PH", "PHB"]:
                wrf_file_obj = WRFModelGrid(valid_date, var, domain, wrf_path)
                gp_grids[var] = wrf_file_obj.load_full_grid()
            wrf_var_grid = (gp_grids["PH"] + gp_grids["PHB"]) / 9.81
            del gp_grids
        elif wrf_var == "PRES":
            p_grids = {}
            for var in ["P", "PB"]:
                wrf_file_obj = WRFModelGrid(valid_date, var, domain, wrf_path)
                p_grids[var] = wrf_file_obj.load_full_grid()
            wrf_var_grid = (gp_grids["P"] + gp_grids["PB"]) * 0.01
        else:
            wrf_file_obj = WRFModelGrid(valid_date, wrf_var, domain, wrf_path)
            wrf_var_grid = wrf_file_obj.load_full_grid()
        if wrf_var_grid is not None:
            for o, object_slice in enumerate(object_slices):
                if len(wrf_var_grid.shape) == 4:
                    var_data = wrf_var_grid[:, :, object_slice[0], object_slice[1]]
                    var = out_data.groups["wrf_object_{0:04d}".format(o)].createVariable(wrf_var, "f4",
                                                                                         ("time", "bottom_top",
                                                                                          "south_north", "west_east"),
                                                                                         zlib=True)
                    var[:] = var_data
                else:
                    var_data = wrf_var_grid[:, object_slice[0], object_slice[1]]
                    var = out_data.groups["wrf_object_{0:04d}".format(o)].createVariable(wrf_var, "f4",
                                                                                         ("time",
                                                                                          "south_north", "west_east"),
                                                                                         zlib=True)
                    var[:] = var_data
    out_data.close()
    return


if __name__ == "__main__":
    main()