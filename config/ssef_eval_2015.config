#!/usr/bin/env python
from datetime import datetime
import numpy as np
ensemble_members = ["wrf-s3cn_arw"] + ["wrf-s3m{0:d}_arw".format(m) for m in range(3, 14)]
scratch_path = "/sharp/djgagne/"
config = dict(ensemble_name="SSEF",
              ensemble_members=ensemble_members,
              start_date=datetime(2015, 5, 12),
              end_date=datetime(2015, 6, 5),
              start_hour=13,
              end_hour=36,
              window_sizes=[1, 3, 24],
              time_skip=1,
              model_names=["Random Forest", "Gradient Boosting", "Logistic Regression"],
              model_types=["size", "start-time", "translation-x", "translation-y"],
              size_thresholds=[25, 50],
              forecast_json_path=scratch_path + "track_forecasts_spring2015_hs_json/",
              track_data_csv_path=scratch_path + "track_data_spring2015_hs_csv/",
              forecast_sample_path=scratch_path + "track_samples_spring2015_hs/",
              mrms_path=scratch_path + "mrms_spring2015/",
              mrms_variable="MESH_Max_60min_00.50",
              obs_mask=True,
              mask_variable="RadarQualityIndex_00.00",
              forecast_thresholds=np.arange(0, 1.1, 0.05),
              dilation_radius=13,
              forecast_bins={"size":np.arange(5, 105, 5),
                             "translation-x":np.arange(-240000, 264000, 24000),
                             "translation-y":np.arange(-240000, 264000, 24000),
                             "start-time":np.arange(-6, 7, 1)
                             },
              object_thresholds=[0, 25, 50],
              out_path=scratch_path + "evaluation_data_spring2015_hs/",
              obj_scores_file="object_scores_ssef2015.csv",
              grid_scores_file="grid_scores_ssef2015.csv",
              )
