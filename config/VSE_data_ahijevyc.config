#!/usr/bin/env python
from hagelslag.processing.ObjectMatcher import shifted_centroid_distance, start_time_distance
from hagelslag.processing.ObjectMatcher import mean_minimum_centroid_distance, mean_area_distance, \
    duration_distance, start_centroid_distance,nonoverlap,mean_min_time_distance,closest_distance
import numpy as np
import datetime, os,sys

scratch_path = "/glade/scratch/ahijevyc/OBJECT_TRACK/"
object_matcher_params=([closest_distance], np.array([1.0]), np.array([0.03*4]))
#watershed_variable="REFL_1KM_AGL"
#watershed_variable="MAX_UPDRAFT_HELICITY"
#watershed_variable="WSPD10MAX"
watershed_variable="UP_HELI_MAX03"
#watershed_variable="HAIL2D"
if watershed_variable == "MAX_UPDRAFT_HELICITY" or watershed_variable == "UP_HELI_MAX03":
    model_watershed_params=(50, 5, 250, 150, 75) #decreasing the size threshold results in more broken tracks
    gaussian_window = 1
if watershed_variable == "WSPD10MAX":
    model_watershed_params=(15,0.5,40,100,75)
    gaussian_window = 1
if watershed_variable == "HAIL2D":
    model_watershed_params=(0.025,0.005,0.1,150,75) # maybe max_size should be 100. and delta=75
    gaussian_window = 1
if watershed_variable == "REFL_1KM_AGL":
    model_watershed_params=(40,1,75,100,75)
    gaussian_window = 1
    object_matcher_params=([shifted_centroid_distance], np.array([1.0]), np.array([12000]))
dates=[ # Don't write leading zeros. It confuses python if you say "09". The zero means something else.
            datetime.datetime(2005, 1,13,12),
            datetime.datetime(2005,12,28,12),
            datetime.datetime(2006, 1,13,12),
            datetime.datetime(2007, 1, 4,12),
            datetime.datetime(2007, 1, 7,12),
            datetime.datetime(2007, 2,12,12),
            datetime.datetime(2007, 2,13,12),
            datetime.datetime(2007, 2,24,12),
            datetime.datetime(2008, 2,12,12),
            datetime.datetime(2008, 2,16,12),
            datetime.datetime(2008, 2,17,12),
            datetime.datetime(2008, 2,25,12),
            datetime.datetime(2008,12, 9,12),
            datetime.datetime(2009, 2,18,12),
            datetime.datetime(2009,12,24,12),
            datetime.datetime(2010, 1,20,12),
            datetime.datetime(2010,12,31,12),
            datetime.datetime(2011, 2,28,12),
            datetime.datetime(2011,12,22,12),
            datetime.datetime(2012, 1,22,12),
            datetime.datetime(2012, 1,25,12),
            #datetime.datetime(2013,12,21,12), # 1km missing
            #datetime.datetime(2014, 2,20,12), # 1km missing
            #datetime.datetime(2014,12,23,12), # 1km missing
            #datetime.datetime(2015, 1, 3,12)  # 1km missing
        ]
#dates =   [datetime.datetime(2009, 2,18,12)]

#ensemble_members=["1km_on_3km_pbl1", "3km_pbl1","1km_on_3km_pbl2", "3km_pbl2","1km_on_3km_pbl7","3km_pbl7"]
ensemble_members=["1km_on_3km_pbl1"]
#storm_variables=["UP_HELI_MAX03","MAX_UPDRAFT_HELICITY","RVORT1_MAX","WSPD10MAX","REFL_MAX_COL","PREC_ACC_NC"]
storm_variables=["MAX_UPDRAFT_HELICITY"]

if set(["1km_on_3km_pbl2", "1km_on_3km_pbl7", "3km_pbl2", "3km_pbl7"]).intersection(ensemble_members) and "UP_HELI_MAX03" in storm_variables:
    print "one of", ensemble_members, "doesn't have UP_HELI_MAX03"
    sys.exit(1)


config = dict(dates=dates,
              start_hour=1,
              end_hour=24,
              watershed_variable=watershed_variable,
              ensemble_members = ensemble_members,
              ensemble_name="VSE",
              model_path="/glade/scratch/ahijevyc/VSE",
              model_watershed_params=model_watershed_params,
              size_filter=0,
              gaussian_window=gaussian_window,
              mrms_path=None,
              mrms_variable="",
              mrms_watershed_params=(2, 1, 50, 100, 100),
              object_matcher_params=object_matcher_params,
              storm_variables = storm_variables,
              track_matcher_params=([nonoverlap],np.array(1),np.array(0)),
              potential_variables=["MUCAPE"],
              tendency_variables=[],
              #shape_variables=["area","major_axis_length","minor_axis_length"],
              shape_variables=["area"],
              #variable_statistics=["mean", "max", "min", "std", "mean_dt", "max_dt"],
              variable_statistics=["max","mean"],
              csv_path=scratch_path + "track_data_VSE_csv_"+watershed_variable+"_%d"%model_watershed_params[0]+"/",
              geojson_path=scratch_path + "track_data_VSE_json_"+watershed_variable+"_%d"%model_watershed_params[0]+"/",
              unique_matches=True,
              train=False,
              single_step=True,
              label_type="gamma",
              #model_map_file="/glade/u/home/dgagne/hagelslag/mapfiles/ncar_ensemble_map_2015.txt",
              # not sure how to deal with 3 and 1 km grids.  I read this 3 km map file for either and hard-coded ModelOutput.py to change for 1km. 
              model_map_file="/glade/p/work/ahijevyc/hagelslag/mapfiles/VSE.txt",
              closest_matches=True
              )
# Make the output directories if needed
for p in [config['csv_path'], config['geojson_path']]:
	if not os.path.isdir(p):
		os.mkdir(p)
