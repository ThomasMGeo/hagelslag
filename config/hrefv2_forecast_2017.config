#!/usr/bin/env python

import numpy as np
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, GradientBoostingRegressor
from sklearn.linear_model import Lasso, LogisticRegression
# from sklearn.model_selection import GridSearchCV  don't have the updated scikitlearn with model_selection module
from sklearn.grid_search import GridSearchCV
from sklearn.metrics import make_scorer, mean_squared_error
from sklearn.ensemble import RandomForestRegressor

from datetime import datetime
import os

num_procs = 20
model_names = ["Random Forest"]
condition_model_names = ["Random Forest", "Gradient Boosting", "Logistic Regression"]
# condition_model_objs = [GridSearchCV(RandomForestClassifier(n_estimators=500, class_weight="auto", n_jobs=num_procs,
#                                                            min_samples_leaf=1, verbose=1),
#                                     param_grid=[dict(max_features=["sqrt", 30, 50],
#                                                      ),
#                                     scoring="roc_auc",
#                                     n_jobs=1),
#                        GradientBoostingClassifier(n_estimators=200, learning_rate=0.05, max_depth=5),
#                       LogisticRegression(penalty='l1')
#                        ]
condition_model_objs = [RandomForestClassifier(n_estimators=500, max_features=0.5, n_jobs=num_procs, max_depth=6),
                        GradientBoostingClassifier(n_estimators=200, learning_rate=0.05, max_depth=5),
                        LogisticRegression(penalty='l1')]

model_objs = [RandomForestClassifier(n_estimators=500, max_features=30, max_depth=6, n_jobs=num_procs)]
dist_model_names = ["Random Forest", "Gradient Boosting", "Lasso"]
# dist_model_names = ["Random Forest CV"]
mse_scorer = make_scorer(mean_squared_error, greater_is_better=False)
# dist_model_objs = [GridSearchCV(RandomForestRegressor(n_estimators=500, n_jobs=num_procs, min_samples_leaf=1),
#                                param_grid=[dict(max_features=["sqrt", 30, 50],
#                                                 )],
#                                scoring=mse_scorer,
#                                n_jobs=1
#                                ),
#                   GradientBoostingRegressor(n_estimators=500, max_depth=5, learning_rate=0.05, verbose=2),
#                   Lasso()
#                   ]

dist_model_objs = [RandomForestRegressor(n_estimators=500, max_features=None, n_jobs=num_procs, min_samples_leaf=1),
                   GradientBoostingRegressor(n_estimators=500, max_depth=5, learning_rate=0.05, verbose=2),
                   Lasso()]

storm_variables = ['Geopotential Height_850', 'Temperature_850',
                   'Dew point temperature_850', 'U component of wind_850', 'V component of wind_850']
potential_variables = []
tendency_variables = []
shape_variables = ["area", "eccentricity", "major_axis_length", "minor_axis_length", "orientation"]
variable_statistics = ["mean", "max", "min", "std"]
input_columns = []
for var in storm_variables:
    for stat in variable_statistics:
        input_columns.append(var + "_" + stat)
for var in potential_variables:
    for stat in variable_statistics:
        input_columns.append(var + "-potential_" + stat)
input_columns += shape_variables
ensemble_members = ['arw_00', 'arw_12', 'nssl_00', 'nssl_12', 'nmmb_00', 'nmmb_12', 'nam_00', 'nam_12']
scratch_path = "/hail/data/HREFv2/hagelslag_files/"

config = dict(ensemble_name="HREFv2",
              ensemble_members=ensemble_members,
              num_procs=num_procs,
              start_dates={"train": datetime(2017, 5, 1), "forecast": datetime(2017, 5, 7)},
              end_dates={"train": datetime(2017, 5, 5), "forecast": datetime(2017, 5, 7)},
              start_hour=2,
              end_hour=36,
              train_data_path=scratch_path + "track_data_spring2017_MAXUVV_closest_csv/",
              forecast_data_path=scratch_path + "track_data_spring2017_MAXUVV_closest_csv/",
              member_files={"train": scratch_path + "member_info_hrefv2_spring2017.csv",
                            "forecast": scratch_path + "member_info_hrefv2_spring2017.csv"},
              data_format="csv",
              group_col="Unique_Member",
              condition_model_names=condition_model_names,
              condition_model_objs=condition_model_objs,
              condition_input_columns=input_columns,
              condition_output_column="Matched",
              condition_threshold=0.5,
              size_distribution_model_names=dist_model_names,
              size_distribution_model_objs=dist_model_objs,
              size_distribution_input_columns=input_columns,
              size_distribution_output_columns=["Shape", "Scale"],
              size_distribution_loc=13,
              load_models=True,
              model_path=scratch_path + "track_models_MAXUVV_closest_spring2017/",
              metadata_columns=["Track_ID", "Step_ID", "Ensemble_Member", "Forecast_Hour"],
              data_json_path=scratch_path + "track_data_spring2017_MAXUVV_closest_json",
              forecast_json_path=scratch_path + "track_forecasts_spring2017_MAXUVV_closest_json/",
              forecast_csv_path=scratch_path + "track_forecasts_spring2017_MAXUVV_closest_csv/",
              netcdf_path=scratch_path + "track_data_spring2017_MAXUVV_patch_nc/",
              ensemble_variables=[],
              ensemble_variable_thresholds={},
              ml_grid_method="gamma",
              neighbor_condition_model="Random Forest",
              neighbor_radius=[14, 28],
              neighbor_sigma=[5, 20],
              ensemble_consensus_path=scratch_path + "hail_consensus_hrefv2_MAXUVV_closest_2017/",
              ensemble_data_path=scratch_path,
              model_map_file="/home/aburke/local/lib/python2.7/site-packages/hagelslag-0.2-py2.7.egg/mapfiles/hrefv2_2017_map.txt",
              ml_grid_percentiles=["mean", 90],
              grib_path=scratch_path + "hail_forecasts_grib2_hrefv2_closest_2017/",
              single_step=True,
              run_date_format="%Y%m%d-%H%M"
              )
