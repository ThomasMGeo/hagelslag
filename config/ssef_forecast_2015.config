#!/usr/bin/env python
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegressionCV
from sklearn.pipeline import Pipeline
from sklearn.feature_selection import SelectKBest, f_classif
from datetime import datetime

num_procs = 10
model_names = ["Random Forest", "Gradient Boosting", "Logistic Regression"]
model_objs = [RandomForestClassifier(n_estimators=100,
                                     min_samples_split=15,
                                     max_features="sqrt",
                                     class_weight="auto",
                                     n_jobs=num_procs),
              GradientBoostingClassifier(n_estimators=100,
                                         learning_rate=0.05,
                                         max_features="sqrt",
                                         min_samples_split=15),
              Pipeline([("features", SelectKBest(f_classif, 10)),
                       ("lr", LogisticRegressionCV(Cs=5, cv=5,
                                                   n_jobs=num_procs,
                                                   class_weight="auto",
                                                   multi_class='multinomial'))])]

storm_variables=["uh_max", "r10cmx", "wupmax", "cqgmax", "wdnmax"]
potential_variables=["mlcape", "mlcins", "sblcl", "srh03", "shr06", "tmp500", "tmp700",
                                   "dewp2m", "temp2m", "sph850", "sph500", "lllr", "lr75"]
variable_statistics=["mean", "max", "min", "std", "mean_dt", "max_dt"]
input_columns = ["Forecast_Hour", "Valid_Hour_UTC", "Duration_Step", "Duration_Total", "Centroid_Lon", "Centroid_Lat"]
for var in storm_variables + potential_variables:
    for stat in variable_statistics:
        input_columns.append(var + "_" + stat)
ensemble_members = ["wrf-s3cn_arw"] + ["wrf-s3m{0:d}_arw".format(m) for m in range(3, 14)]
config = dict(ensemble_name="SSEF",
              ensemble_members=ensemble_members,
              num_procs=num_procs,
              start_dates={"train": datetime(2014, 4, 28), "forecast": datetime(2015, 5, 10)},
              end_dates={"train": datetime(2014, 6, 6), "forecast": datetime(2015, 6, 5)},
              start_hour=12,
              end_hour=36,
              map_filename="mapfiles/ssef2015.map",
              train_data_path="/sharp/djgagne/track_data_spring2014_csv/",
              forecast_data_path="/sharp/djgagne/track_data_spring2015_csv/",
              member_files={"train":"/sharp/djgagne/track_data_spring2014_csv/member_info_ssef_spring2014.csv",
                            "forecast":"/sharp/djgagne/track_data_spring2014_csv/member_info_ssef_spring2015.csv"},
              data_format="csv",
              group_col="Microphysics",
              condition_model_names=model_names,
              condition_model_objs=model_objs,
              condition_input_columns=input_columns,
              condition_output_column="Hail_Size",
              output_threshold=5,
              size_model_names=model_names,
              size_model_objs=model_objs,
              size_input_columns=input_columns,
              size_output_column="Hail_Size",
              size_range_params=(5, 100, 5),
              track_model_names=model_names,
              track_model_objs=model_objs,
              track_input_columns=input_columns,
              track_output_columns={"translation-x":"Translation_Error_X",
                                    "translation-y":"Translation_Error_Y",
                                    "start-time":"Start_Time_Error"},
              track_output_ranges={"translation-x":(-100000,100000,25000),
                                   "translation-y":(-100000,100000,25000),
                                   "start-time":(-6,6,1),
                                   },
              load_models=True,
              model_path="/sharp/djgagne/track_models_hs_spring2015/",
              metadata_columns=["Track_ID", "Step_ID"],
              data_json_path="/sharp/djgagne/track_data_spring2015_hs_json/",
              forecast_json_path="/sharp/djgagne/track_forecasts_spring2015_json/",
              copula_file="/sharp/djgagne/track_copulas.pkl",
              )

